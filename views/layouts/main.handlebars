<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Canvas</title>
    <style>
      canvas {
        border: 1px solid #000;
        background-color: #ddd;

      }
      body {
        margin: 0;
        box-sizing: border-box;
      }
    </style>
  </head>
  <body>

    <p id="results">Results:</p>
    <canvas id="canvas" width=300 height=300></canvas>

    {{!-- <button></button> --}}
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>
    <script type="text/javascript" src="js/canvas.js"></script>
    <script type="text/javascript">
      const socket = io.connect('/');

      let socketID = undefined;
      let players = {};

      //let coords = {x:0, y:0};



      socket.on('send_id_to_client', val => {
        console.log(`Your socket id is ${val}`);
        socketID = val;
      });

      startCheck = setInterval(function() {
        if (socketID !== undefined) {
          clearInterval(startCheck);
          startSendCoordsTimer();
        }
      }, 10);

      function startSendCoordsTimer() {sendTimer = setInterval(sendCoordsToServer, 15)};
      function sendCoordsToServer() {socket.emit('client_update_coords', {x:callum.x, y:callum.y})};


      socket.on('send_coords_to_client', val => {
          //console.log('updating coords')
          //console.log(players)
          for (let key in val) {
            if (key !== socketID) {

            //console.log(players[key])
            //console.log(players[key].)
            if (key in players == false) {
              //console.log('neww player')
              players[key] = val[key];
              // give canvas methods and properties
              players[key] = new Player();
              //console.log(players[key])
            } 
            players[key].x = val[key].x;
            players[key].y = val[key].y;

            }

            
          }
          //console.log(players)
        });

      socket.on('client_disconnect', id => {
        //console.log('client disconnected, deleting player')
        delete players[id];
      });





      // ====================================

      



//      const findIndex = id => {
//        let returnVal = {index: null};
//
//        users.forEach((item, index) => {
//          if (item.id == id) {
//            returnVal = {index, x: item.coords.x, y: item.coords.y};
//            return returnVal;
//          }
//        });
//        return returnVal;
//      }; 

 


 


        
        // Update player coords
 //       Object.keys(players).forEach((item, index) => {
      //    console.log(players[item])
       //   console.log(users);

       //   let userIndex = findIndex(item);
          //console.log('reeeeee', users[userIndex.index].coords)

        //  players[item].x = users[userIndex.index].coords.x;
        //  players[item].y = users[userIndex.index].coords.y;
          //players[item].draw();
     //   });

    //  })




    </script>
  </body>
</html>
